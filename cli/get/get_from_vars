#!/usr/bin/env python3

import argparse
import logging
import yaml
import os
import re

parser = argparse.ArgumentParser()
parser.add_argument("-n", "--network-settings",
                    dest="argNetwrokSettings",
                    action='store_true',
                    help="print the network settings",
                    required=False)
parser.add_argument("--fpga-device-names",
                    dest="argFpgaDeviceNames",
                    action='store_true',
                    help="print the fpga device names",
                    required=False)
parser.add_argument("--fpga-serial-numbers",
                    dest="argFpgaSerialNumbers",
                    action='store_true',
                    help="print the fpga serial numbers",
                    required=False)
parser.add_argument("-f", "--file",
                    default=os.environ.get('CLI_VARS', '/opt/user_tools')+"/vars.yml",
                    help="path to vars file",
                    required=False)
parser.add_argument("-l", "--local",
                    dest="argLocal",
                    action='store_true',
                    help="only output infos for localhost",
                    required=False)
parser.add_argument("--filter",
                    dest="argFilter",
                    default="",
                    help="filter output containing regex expression",
                    required=False)
parser.add_argument("-v", "--debug",
                    dest="argDebug",
                    action='store_true',
                    help="verbose output",
                    required=False)
args = parser.parse_args()

if args.argDebug:
    logging.basicConfig(level=logging.DEBUG)
else:
    logging.basicConfig(level=logging.WARNING)

if not os.path.isfile(args.file):
    logging.error("%s is not a file" % (args.file))
    exit(1)

with open(args.file, 'r') as varsFile:
    varsYaml = yaml.safe_load(varsFile)

def isOnlyLocalHost(hostToMatch):
    if args.argLocal:
        uname = os.uname()
        if not uname.nodename.startswith(hostToMatch):
            return True
    return False

def isFiltered(settingToMatch):
    if (isinstance(args.argFilter, str)
        and args.argFilter != ""):
        if re.search(args.argFilter, settingToMatch) == None:
            return True
    return False

def getSettingName(nameList):
    for i, n in enumerate(nameList):
        if not isinstance(n, str):
            nameList[i] = str(n)
    l = ""
    l = "_".join(nameList).replace("-", "_")
    if not isFiltered(l):
        return l
    return False

def getNetworkSettings(vars):
    ns = {}
    prefixes = ["network", "settings"]
    for host, settings in vars['network_settings'].items():
        if isOnlyLocalHost(host):
            continue
        objectName = prefixes + [host]
        if 'mellanox' in settings['interfaces'].keys():
            for i, m in enumerate(settings['interfaces']['mellanox']):
                settingName = objectName + ['mellanox', i]
                sn = getSettingName(settingName)
                if not sn == False:
                    ns[sn] = ("%s (%s)" % (m['ip'], m['mac']))
        if 'fpga' in settings['interfaces'].keys():
            for i, m in enumerate(settings['interfaces']['fpga']):
                settingName = objectName + ['fpga', i]
                sn = getSettingName(settingName)
                if not sn == False:
                    ns[sn] = ("%s (%s)" % (m['ip'], m['mac']))
    return ns

def getFpgaDevices(vars):
    ns = {}
    prefixes = ["fpga", "device", "names"]
    for host, deviceName in vars['fpga_device_names'].items():
        if isOnlyLocalHost(host):
            continue
        settingName = prefixes + [host]
        sn = getSettingName(settingName)
        if not sn == False:
            ns[sn] = deviceName
    return ns

def getFpgaSerialNumbers(vars):
    ns = {}
    prefixes = ["fpga", "serial", "numbers"]
    for host, deviceName in vars['fpga_serial_numbers'].items():
        if isOnlyLocalHost(host):
            continue
        settingName = prefixes + [host]
        sn = getSettingName(settingName)
        if not sn == False:
            ns[sn] = deviceName
    return ns

def output(content):
    for k, v in content.items():
        print("%s=\"%s\"" % (k, v))

if __name__ == '__main__':
    if args.argLocal:
        logging.info("only settings for matching localhost are printed")   
    if args.argNetwrokSettings:
        logging.debug("printing network settings")
        output(getNetworkSettings(varsYaml))
    if args.argFpgaDeviceNames:
        logging.debug("printing fpga device names")
        output(getFpgaDevices(varsYaml))
    if args.argFpgaSerialNumbers:
        logging.debug("printing fpga serial numbers")
        output(getFpgaSerialNumbers(varsYaml))